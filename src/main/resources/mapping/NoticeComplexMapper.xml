<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.loki.server.dao.NoticeComplexDao">
  <cache eviction="LRU" type="com.loki.server.cache.RedisCache"/>
  <resultMap id="noticeComplexDO" type="com.loki.server.entity.NoticeComplex">  
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="admin_creator_id" jdbcType="INTEGER" property="adminCreatorId" />
    <result column="admin_updater_id" jdbcType="INTEGER" property="adminUpdaterId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="relation_type" jdbcType="VARCHAR" property="relationType" />
    <result column="relation_id" jdbcType="INTEGER" property="relationId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="is_read" jdbcType="BIT" property="isRead" />
    <result column="user_count" jdbcType="INTEGER" property="userCount" />
    <result column="relation_type_name" jdbcType="VARCHAR" property="relationTypeName" />
    <result column="admin_creator_name" jdbcType="VARCHAR" property="adminCreatorName" />
    <result column="admin_updater_name" jdbcType="VARCHAR" property="adminUpdaterName" />
  </resultMap>
  
  <select id="findByParamMobile" resultMap="noticeComplexDO">
		select notice.*,
			user_notice.user_id,
			user_notice.is_read
			from user_notice 
			left join notice on notice.id=user_notice.notice_id
		<where>
			<if test="createTimeStart != null">
			 	<![CDATA[
					notice.create_time>=UNIX_TIMESTAMP(#{createTimeStart})
				]]>
			</if>
			<if test="createTimeEnd != null">
			 	<![CDATA[
					and notice.create_time<=UNIX_TIMESTAMP(#{createTimeEnd})
				]]>
			</if>
			<if test="updateTimeStart != null">
			 	<![CDATA[
					and notice.update_time>=UNIX_TIMESTAMP(#{updateTimeStart})
				]]>
			</if>
			<if test="createTimeEnd != null">
			 	<![CDATA[
					and notice.update_time<=UNIX_TIMESTAMP(#{updateTimeEnd})
				]]>
			</if>
			<if test="adminCreatorId !=null">
				and notice.admin_creator_id=#{adminCreatorId}
			</if>
			<if test="adminUpdaterId !=null">
				and notice.admin_updater_id=#{adminUpdaterId}
			</if>
			<if test="title !=null">
				and notice.title like CONCAT('%','${title}','%' ) 
			</if>
			<if test="content !=null">
				and notice.content like CONCAT('%','${content}','%' ) 
			</if>
			<if test="relationType !=null">
				and notice.relation_type=#{relationType}
			</if>
			<if test="relationId !=null">
				and notice.relation_id=#{relationId}
			</if>
			<if test="userId !=null">
				and user_notice.user_id=#{userId}
			</if>
			<if test="isRead !=null">
				and user_notice.is_read=#{isRead}
			</if>
		</where>
		order by id desc
  </select>
  
  <select id="findByIdMobile" parameterType="int" resultMap="noticeComplexDO">
  		select notice.*,
		user_notice.user_id,
		user_notice.is_read
		from user_notice 
		left join notice on notice.id=user_notice.notice_id
		where notice.id=#{_parameter}
  </select>
  
  <select id="findById" parameterType="int" resultMap="noticeComplexDO">
  		select notice.*,count(user_notice.id) as user_count,dictionaries.value as relation_type_name,_admin_creator.user_name as admin_creator_name,_admin_updater.user_name as admin_updater_name
		from notice 
		left join user_notice on notice.id=user_notice.notice_id
		left join dictionaries on dictionaries.type='notice_type' and dictionaries.code=notice.relation_type
		left join admin _admin_creator on _admin_creator.id=notice.admin_creator_id
		left join admin _admin_updater on _admin_updater.id=notice.admin_updater_id
		where notice.id=#{_parameter}
  </select>
  
  <select id="findByParam" resultMap="noticeComplexDO">
		select notice.*,count(user_notice.id) as user_count,dictionaries.value as relation_type_name,_admin_creator.user_name as admin_creator_name,_admin_updater.user_name as admin_updater_name
		from notice 
		left join user_notice on notice.id=user_notice.notice_id
		left join dictionaries on dictionaries.type='notice_type' and dictionaries.code=notice.relation_type
		left join admin _admin_creator on _admin_creator.id=notice.admin_creator_id
		left join admin _admin_updater on _admin_updater.id=notice.admin_updater_id
		<where>
			<if test="createTimeStart != null">
			 	<![CDATA[
					notice.create_time>=#{createTimeStart}
				]]>
			</if>
			<if test="createTimeEnd != null">
			 	<![CDATA[
					and notice.create_time<=#{createTimeEnd}
				]]>
			</if>
			<if test="updateTimeStart != null">
			 	<![CDATA[
					and notice.update_time>=#{updateTimeStart}
				]]>
			</if>
			<if test="updateTimeEnd != null">
			 	<![CDATA[
					and notice.update_time<=#{updateTimeEnd}
				]]>
			</if>
			<if test="adminCreatorId !=null">
				and notice.admin_creator_id=#{adminCreatorId}
			</if>
			<if test="adminUpdaterId !=null">
				and notice.admin_updater_id=#{adminUpdaterId}
			</if>
			<if test="title !=null and title!=''">
				and notice.title like CONCAT('%','${title}','%' ) 
			</if>
			<if test="content !=null and content!=''">
				and notice.content like CONCAT('%','${content}','%' ) 
			</if>
			<if test="relationType !=null and relationType!=''">
				and notice.relation_type=#{relationType}
			</if>
			<if test="relationId !=null and relationId!=0">
				and notice.relation_id=#{relationId}
			</if>
		</where>
		GROUP BY  notice.id 
		ORDER BY
		 <choose>
	        <when test="sortName!=null">
	                notice.${sortName}
	            <if test="sortOrder!=null">
	                ${sortOrder}
	            </if>
	        </when>
	        <otherwise>
	            id desc
	        </otherwise>
	     </choose>
  </select>
</mapper>