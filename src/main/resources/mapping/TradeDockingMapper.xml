<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.loki.server.dao.TradeDockingDao">
  <cache eviction="LRU" type="com.loki.server.cache.RedisCache"/>
  <resultMap id="tradeDockingDO" type="com.loki.server.entity.TradeDocking">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="creator_id" jdbcType="INTEGER" property="creatorId" />
    <result column="updater_id" jdbcType="INTEGER" property="updaterId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="trade_id" jdbcType="INTEGER" property="tradeId" />
    <result column="identity_id" jdbcType="INTEGER" property="identityId" />
    <result column="enterprise_id" jdbcType="INTEGER" property="enterpriseId" />
    <result column="offer" jdbcType="DECIMAL" property="offer" />
    <result column="intention" jdbcType="DECIMAL" property="intention" />
    <result column="message" jdbcType="VARCHAR" property="message" />
    <result column="type" jdbcType="VARCHAR" property="type" />
  </resultMap>
  
  <sql id="Base_Column_List">
    id,create_time,update_time,creator_id,updater_id,user_id,trade_id,identity_id,enterprise_id,offer,intention,message,type
  </sql>
  
  <insert id="insert" useGeneratedKeys="true" keyProperty="id"  parameterType="com.loki.server.entity.TradeDocking">
		insert into trade_docking(create_time,creator_id,user_id,trade_id,identity_id,enterprise_id,offer,intention,message,type) 
		values(now(),#{creatorId},#{userId},#{tradeId},#{identityId},#{enterpriseId},#{offer},#{intention},#{message},#{type})
	</insert>
	
  <update id="update" parameterType="com.loki.server.entity.User">
  	update trade_docking SET update_time=now(),updater_id=#{updaterId},user_id=#{userId},trade_id=#{tradeId},identity_id=#{identityId},enterprise_id=#{enterpriseId},offer=#{offer},intention=#{intention},message=#{message},type=#{type} where id=#{id}
  </update>
  
  <select id="findById" parameterType="int" resultMap="tradeDockingDO">
		select <include refid="Base_Column_List" /> 
		from trade_docking
		where id=#{_parameter}
  </select>
  
  <select id="findByTradeId" parameterType="int" resultMap="tradeDockingDO">
		select <include refid="Base_Column_List" /> 
		from trade_docking
		where trade_id=#{_parameter}
		order by id desc 
  </select>
  
  <select id="findByParam" resultMap="tradeDockingDO">
		select <include refid="Base_Column_List" /> 
		from trade_docking
		<where>
			<if test="tradeId != null and tradeId != 0">
				trade_id=#{tradeId}
			</if>
			<if test="userId != null and userId != 0">
				and user_id=#{userId}
			</if>
			<if test="identityId != null and identityId != 0">
				and identity_id=#{identityId}
			</if>
			<if test="enterpriseId != null and enterpriseId != 0">
				and enterprise_id=#{enterpriseId}
			</if>
			<if test="type != null and type !=''">
				and type=#{type}
			</if>
			<if test="id !=null and id !=0">
				and id=#{id}
			</if>
		</where>
		ORDER BY
		<choose>
			<when test="sortName!=null">
				${sortName}
				<if test="sortOrder!=null">
					${sortOrder}
				</if>
			</when>
			<otherwise>
				id desc
			</otherwise>
		</choose>
  </select>
  
  <select id="findByIdAndUserId" resultMap="tradeDockingDO">
  		select <include refid="Base_Column_List" /> 
		from trade_docking
		where id=#{id} and user_id=#{userId}
  </select>
  
  <select id="countByTradeAndUserId" resultType="int">
  		select count(id)
		from trade_docking
		where trade_id=#{tradeId} and user_id=#{userId}
  </select>
  
  <select id="findByUserId" parameterType="int" resultMap="tradeDockingDO">
		select <include refid="Base_Column_List" /> 
		from trade_docking
		where user_id=#{_parameter}
  </select>
  
  <select id="findAll" resultMap="tradeDockingDO">
		select <include refid="Base_Column_List" /> 
		from trade_docking
  </select>
  
  <delete id="delete" parameterType="int">
		delete from trade_docking where id=#{_parameter}
	</delete>
</mapper>